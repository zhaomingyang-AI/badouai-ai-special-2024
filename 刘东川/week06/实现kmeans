import cv2
import numpy as np
import matplotlib.pyplot as plt


def initialize_centroids(X, K):
    # 随机选择K个数据点作为初始中心
    return X[np.random.choice(X.shape[0], K, replace=False)]


def assign_labels(X, centroids):
    # 计算每个点到每个中心的距离，并分配标签
    distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)
    return np.argmin(distances, axis=1)


def update_centroids(X, labels, K):
    # 更新每个中心的位置
    new_centroids = np.array([X[labels == k].mean(axis=0) for k in range(K)])
    return new_centroids


def kmeans(X, K, max_iters=100):
    centroids = initialize_centroids(X, K)
    for _ in range(max_iters):
        labels = assign_labels(X, centroids)
        new_centroids = update_centroids(X, labels, K)
        if np.all(centroids == new_centroids):
            break
        centroids = new_centroids
    return labels, centroids


# 读取图像并预处理
image = cv2.imread('lenna.png')
Z = image.reshape((-1, 3)).astype(np.float32)

# 执行K-means
K = 4  # 聚类数目
labels, centers = kmeans(Z, K)

# 将中心点转换为uint8，并重建图像
centers = centers.astype(np.uint8)
segmented_image = centers[labels].reshape(image.shape)

# 将BGR图像转换为RGB格式
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
segmented_image = cv2.cvtColor(segmented_image, cv2.COLOR_BGR2RGB)

# 创建一个图形并显示两个图像
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(image)
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title('Segmented Image (K-means)')
plt.imshow(segmented_image)
plt.axis('off')

plt.tight_layout()
plt.show()

