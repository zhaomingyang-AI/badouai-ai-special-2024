import torch
from PIL import Image, ImageDraw, ImageFont
import numpy as np
from utils import utils
import MTCNN_20250101
from torchvision import transforms
import time
import os

class Detector:
    def __init__(self, pnet_param="./param/p_net.pth", rnet_param="./param/r_net.pth", onet_param="./param/o_net.pth",
                 isCuda=False):
        self.isCuda = isCuda

        self.pnet = MTCNN_20250101.PNet()
        self.rnet = MTCNN_20250101.RNet()
        self.onet = MTCNN_20250101.ONet()

        if self.isCuda:
            self.pnet.cuda()
            self.rnet.cuda()
            self.onet.cuda()

        self.pnet.load_state_dict(torch.load(pnet_param, map_location='cpu'))
        self.rnet.load_state_dict(torch.load(rnet_param, map_location='cpu'))
        self.onet.load_state_dict(torch.load(onet_param, map_location='cpu'))

        self.pnet.eval()
        self.rnet.eval()
        self.onet.eval()

        def extract_rgb(tensor):
            if tensor.shape[0] == 4:
                return tensor[:3, :, :]
            return tensor

        self.__image_transform = transforms.Compose([
            transforms.ToTensor(),
            transforms.Lambda(extract_rgb),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        ])

    def detect(self, image):
        start_time = time.time()
        pnet_boxes = self.__pnet_detect(image)
        if pnet_boxes.shape[0] == 0:
            return np.array([])
        end_time = time.time()
        t_pnet = end_time - start_time

        start_time = time.time()
        rnet_boxes = self.__rnet_detect(image, pnet_boxes)
        if rnet_boxes.shape[0] == 0:
            return np.array([])
        end_time = time.time()
        t_rnet = end_time - start_time

        start_time = time.time()
        onet_boxes = self.__onet_detect(image, rnet_boxes)
        if onet_boxes.shape[0] == 0:
            return np.array([])
        end_time = time.time()

        t_onet = end_time - start_time

        t_sum = t_pnet + t_rnet + t_onet

        print("total:{0} pnet:{1} rnet:{2} onet:{3}".format(t_sum, t_pnet, t_rnet, t_onet))

        return onet_boxes

    def __pnet_detect(self, img):
        boxes = []
        w, h = img.size
        min_side_len = min(w, h)

        scale = 1

        while min_side_len >= 12:
            img_data = self.__image_transform(img)
            print(f"输入数据原始形状: {img_data.shape}")
            img_data = img_data.unsqueeze(0)
            print(f"添加批量维度后输入数据形状: {img_data.shape}")

            _cls, _offest = self.pnet(img_data)
            _cls = _cls.squeeze(0)
            _offest = _offest.squeeze(0)

            cls, offest = _cls[0][0].cpu().data, _offest[0].cpu().data

            idxs = torch.nonzero(torch.gt(cls, 0.6))

            for idx in idxs:
                print(f"idx: {idx}, cls shape: {cls.shape}")
                score = cls[idx[0]]
                print(f"获取的 score 值: {score}")

                if cls.dim() == 1:
                    # 如果 cls 是一维的，手动补充另一个维度的索引为 0
                    start_index = torch.tensor([idx[0].item(), 0])
                else:
                    # 如果 cls 是二维的，直接使用 idx 的两个值
                    start_index = torch.tensor([idx[0].item(), idx[1].item()])

                boxes.append(self.__box(start_index, offest, score, scale))

            scale *= 0.709
            _w = int(w * scale)
            _h = int(h * scale)

            img = img.resize((_w, _h))
            min_side_len = np.minimum(_w, _h)
        return utils.nms(np.array(boxes), 0.3)

    def __box(self, start_index, offset, cls, scale, stride=2, side_len=12):
        print(f"offset shape: {offset.shape}")
        if len(start_index) < 2:
            raise ValueError("start_index 长度不足，需要至少两个元素")

        row_index = start_index[0].item()
        col_index = start_index[1].item()

        # 检查 offset 的维度
        if offset.dim() == 2:
            # 如果是二维张量，假设两个维度分别对应不同的偏移信息
            # 这里需要根据实际情况调整逻辑
            offset_x = offset[row_index, col_index]
            offset_y = offset[row_index, col_index]  # 假设两个方向偏移相同，可根据实际修改

            offsets = torch.tensor([offset_x, offset_y, offset_x, offset_y])  # 构建四个偏移量
        else:
            # 如果不是二维张量，保留原来的逻辑（这里可能需要根据实际情况调整）
            offsets = offset[:, row_index, col_index]

        _x1 = int(start_index[1] * stride) / scale
        _y1 = int(start_index[0] * stride) / scale
        _x2 = int(start_index[1] * stride + side_len) / scale
        _y2 = int(start_index[0] * stride + side_len) / scale

        ow = _x2 - _x1
        oh = _y2 - _y1

        # 检查 offsets 是否为零维张量
        if offsets.dim() == 0:
            # 如果是零维张量，直接使用其值
            offsets_value = offsets.item()
            x1 = _x1 + ow * offsets_value
            y1 = _y1 + oh * offsets_value
            x2 = _x2 + ow * offsets_value
            y2 = _y2 + oh * offsets_value
        else:
            # 如果不是零维张量，进行索引操作
            x1 = _x1 + ow * offsets[0].item()
            y1 = _y1 + oh * offsets[1].item()
            x2 = _x2 + ow * offsets[2].item()
            y2 = _y2 + oh * offsets[3].item()

        return [x1, y1, x2, y2, cls]

    def __rnet_detect(self, image, pnet_boxes):
        _img_dataset = []
        _pnet_boxes = utils.convert_to_square(pnet_boxes)
        for _box in _pnet_boxes:
            _x1 = int(_box[0])
            _y1 = int(_box[1])
            _x2 = int(_box[2])
            _y2 = int(_box[3])

            img = image.crop((_x1, _y1, _x2, _y2))
            img = img.resize((24, 24))
            img_data = self.__image_transform(img)
            _img_dataset.append(img_data)

        img_dataset = torch.stack(_img_dataset)
        if self.isCuda:
            img_dataset = img_dataset.cuda()

        _cls, _offset = self.rnet(img_dataset)
        _cls = _cls.cpu().data.numpy()
        offset = _offset.cpu().data.numpy()
        boxes = []

        idxs, _ = np.where(_cls > 0.6)
        for idx in idxs:
            _box = _pnet_boxes[idx]
            _x1 = int(_box[0])
            _y1 = int(_box[1])
            _x2 = int(_box[2])
            _y2 = int(_box[3])

            ow = _x2 - _x1
            oh = _y2 - _y1

            x1 = _x1 + ow * offset[idx][0]
            y1 = _y1 + oh * offset[idx][1]
            x2 = _x2 + ow * offset[idx][2]
            y2 = _y2 + oh * offset[idx][3]
            cls = _cls[idx][0]

            boxes.append([x1, y1, x2, y2, cls])

        return utils.nms(np.array(boxes), 0.3)

    def __onet_detect(self, image, rnet_boxes):
        _img_dataset = []
        _rnet_boxes = utils.convert_to_square(rnet_boxes)
        for _box in _rnet_boxes:
            _x1 = int(_box[0])
            _y1 = int(_box[1])
            _x2 = int(_box[2])
            _y2 = int(_box[3])

            img = image.crop((_x1, _y1, _x2, _y2))
            img = img.resize((48, 48))
            img_data = self.__image_transform(img)
            _img_dataset.append(img_data)

        img_dataset = torch.stack(_img_dataset)
        if self.isCuda:
            img_dataset = img_dataset.cuda()

        _cls, _offset = self.onet(img_dataset)

        _cls = _cls.cpu().data.numpy()
        offset = _offset.cpu().data.numpy()

        boxes = []
        idxs, _ = np.where(_cls > 0.97)
        for idx in idxs:
            _box = _rnet_boxes[idx]
            _x1 = int(_box[0])
            _y1 = int(_box[1])
            _x2 = int(_box[2])
            _y2 = int(_box[3])

            ow = _x2 - _x1
            oh = _y2 - _y1

            x1 = _x1 + ow * offset[idx][0]
            y1 = _y1 + oh * offset[idx][1]
            x2 = _x2 + ow * offset[idx][2]
            y2 = _y2 + oh * offset[idx][3]
            cls = _cls[idx][0]

            boxes.append([x1, y1, x2, y2, cls])

        return utils.nms(np.array(boxes), 0.3, isMin=True)


if __name__ == '__main__':
    x = time.time()
    with torch.no_grad() as grad:
        path = r"D:\AI\CelebA\MTCN\图片1"

        for name in os.listdir(path):
            img_path = os.path.join(path, name)
            img = Image.open(img_path)

            detector = Detector()

            boxes = detector.detect(img)
            imDraw = ImageDraw.Draw(img)
            for box in boxes:
                x1 = int(box[0])
                y1 = int(box[1])
                x2 = int(box[2])
                y2 = int(box[3])

                cls = box[4]
                imDraw.rectangle((x1, y1, x2, y2), outline='red')
                font = ImageFont.truetype(r"C:\Windows\Fonts\simhei", size=20)
                # imDraw.text((x1, y1), "{:.3f}".format(cls), fill="red", font=font)
            y = time.time()
            print(y - x)
            img.show()
