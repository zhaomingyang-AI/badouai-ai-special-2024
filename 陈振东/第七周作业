#层次聚类
from scipy.cluster.hierarchy import dendrogram,linkage,fcluster
from matplotlib import pyplot as plt
X=[[1,3],[2,3],[3,4],[4,2],[2,5]]
Z=linkage(X,'ward')
f=fcluster(Z,2,'distance')
print(Z)
print(f)
fig=plt.figure(figsize=(5,3))
dn=dendrogram(Z)
plt.show()

#sift
import numpy as np
import scipy as sp
import scipy.linalg as sl

def ransac(data, model, n, k, t, d, debug=False, return_all=False):
iterations = 0
bestfit = None
besterr = np.inf
best_inlier_idxs = None
while iterations < k:
    maybe_idxs, test_idxs = random_partition(n, data.shape[0])
    print('test_idxs = ', test_idxs)
    maybe_inliers = data[maybe_idxs, :]
    test_points = data[test_idxs]
    maybemodel = model.fit(maybe_inliers)
    test_err = model.get_error(test_points, maybemodel)
    print('test_err = ', test_err < t)
    also_idxs = test_idxs[test_err < t]
    print('also_idxs = ', also_idxs)
    also_inliers = data[also_idxs, :]
    if debug:
        print('test_err.min()', test_err.min())
        print('test_err.max()', test_err.max())
        print('numpy.mean(test_err)', numpy.mean(test_err))
        print('iteration %d:len(alsoinliers) = %d' % (iterations, len(also_inliers)))
    print('d = ', d)
    if (len(also_inliers) > d):
        betterdata = np.concatenate((maybe_inliers, also_inliers))
        bettermodel = model.fit(betterdata)
        better_errs = model.get_error(betterdata, bettermodel)
        thiserr = np.mean(better_errs)
            bestfit = bettermodel
            besterr = thiserr
            best_inlier_idxs = np.concatenate((maybe_idxs, also_idxs))
    iterations += 1
if bestfit is None:
    raise ValueError("did't meet fit acceptance criteria")
if return_all:
    return bestfit, {'inliers': best_inlier_idxs}
else:
    return bestfit
